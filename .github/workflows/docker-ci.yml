name: CI / Build & Publish Docker Image

on:
  push:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'yarn'
          cache-dependency-path: ./app/yarn.lock

      - name: Install dependencies
        run: yarn install
        working-directory: ./app

      # - name: Run tests
      #   run: yarn test
      #   working-directory: ./app

      - name: Set lowercase image name
        id: vars
        run: |
          echo "image_name=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}:latest
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}:${{ github.sha }}

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: eu-north-1

      # - name: Trigger AWS CodePipeline
      #   run: |
      #     aws codepipeline start-pipeline-execution --name goofeat_pipeline

  deploy-minikube:
    name: Deploy to Minikube
    needs: build-and-push
    runs-on: self-hosted
    env:
      NAMESPACE: goofeat
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set lowercase image name
        id: vars
        run: echo "image_name=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Compute image ref
        id: image
        run: echo "ref=${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Ensure kubectl present
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Use minikube context
        shell: bash
        run: |
          if command -v minikube >/dev/null 2>&1; then
            minikube update-context
          fi
          kubectl config use-context minikube || true

      - name: Create namespace
        run: kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create app env secret from GitHub secret
        env:
          APP_ENV_PROD: ${{ vars.APP_ENV_PROD }}
        shell: bash
        run: |
          if [ -z "${APP_ENV_PROD}" ]; then
            echo "Secret APP_ENV_PROD manquant. Ajoutez une variable d'environnement de dépôt GitHub nommé APP_ENV_PROD contenant votre .env de prod" >&2
            exit 1
          fi
          printf "%s" "$APP_ENV_PROD" > .env.prod
          kubectl -n ${{ env.NAMESPACE }} create secret generic app-env \
            --from-env-file=.env.prod \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Configure GHCR imagePullSecret (optional)
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        shell: bash
        run: |
          if [ -n "${GHCR_USERNAME}" ] && [ -n "${GHCR_TOKEN}" ]; then
            kubectl -n ${{ env.NAMESPACE }} create secret docker-registry ghcr-creds \
              --docker-server=${{ env.REGISTRY }} \
              --docker-username="${GHCR_USERNAME}" \
              --docker-password="${GHCR_TOKEN}" \
              --dry-run=client -o yaml | kubectl apply -f -
            kubectl -n ${{ env.NAMESPACE }} patch serviceaccount default -p '{"imagePullSecrets":[{"name":"ghcr-creds"}]}' || true
          else
            echo "GHCR credentials not provided. Skipping imagePullSecret creation."
          fi

      - name: Apply Deployment and Service
        shell: bash
        run: |
          cat <<'YAML' | sed "s#{{IMAGE}}#${{ steps.image.outputs.ref }}#g" | kubectl -n ${{ env.NAMESPACE }} apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: goofeat-back
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: goofeat-back
            template:
              metadata:
                labels:
                  app: goofeat-back
              spec:
                containers:
                - name: app
                  image: {{IMAGE}}
                  imagePullPolicy: IfNotPresent
                  envFrom:
                  - secretRef:
                      name: app-env
                  ports:
                  - containerPort: 3000
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: goofeat-back
          spec:
            type: NodePort
            selector:
              app: goofeat-back
            ports:
            - port: 3000
              targetPort: 3000
              nodePort: 30080
          YAML

      - name: Rollout status
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deploy/goofeat-back --timeout=120s

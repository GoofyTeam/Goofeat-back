name: CI / Build & Deploy

on:
  push:
    branches:
      - main
      - master

env:
  REGISTRY: ghcr.io
  NAMESPACE: goofeat

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    outputs:
      image_name: ${{ steps.vars.outputs.image_name }}
      image_ref: ${{ steps.vars.outputs.image_ref }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
          cache-dependency-path: ./app/yarn.lock

      - name: Install dependencies
        run: yarn install
        working-directory: ./app

      - name: Build application
        run: yarn build
        working-directory: ./app

      - name: Type check
        run: yarn typecheck
        working-directory: ./app

      - name: Set image variables
        id: vars
        run: |
          IMAGE_NAME="${GITHUB_REPOSITORY,,}"
          IMAGE_REF="${{ env.REGISTRY }}/${IMAGE_NAME}:${{ github.sha }}"
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_ref=${IMAGE_REF}" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name }}:latest
            ${{ steps.vars.outputs.image_ref }}

  deploy:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: self-hosted
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.30.0'

      - name: Setup Kustomize
        run: |
          if ! command -v kustomize &> /dev/null; then
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            mkdir -p $HOME/bin
            mv kustomize $HOME/bin/
            echo "$HOME/bin" >> $GITHUB_PATH
          fi

      - name: Create namespace
        run: kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create app environment secret
        env:
          APP_ENV_PROD: ${{ vars.APP_ENV_PROD }}
        run: |
          if [ -z "${APP_ENV_PROD}" ]; then
            echo "Variable APP_ENV_PROD manquante. Ajoutez une variable GitHub nommée APP_ENV_PROD contenant votre .env de prod" >&2
            exit 1
          fi
          printf "%s" "$APP_ENV_PROD" > .env.prod
          kubectl -n ${{ env.NAMESPACE }} create secret generic app-env \
            --from-env-file=.env.prod \
            --dry-run=client -o yaml | kubectl apply -f -
          rm .env.prod

      - name: Configure container registry credentials
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          if [ -n "${GHCR_USERNAME}" ] && [ -n "${GHCR_TOKEN}" ]; then
            kubectl -n ${{ env.NAMESPACE }} create secret docker-registry ghcr-creds \
              --docker-server=${{ env.REGISTRY }} \
              --docker-username="${GHCR_USERNAME}" \
              --docker-password="${GHCR_TOKEN}" \
              --dry-run=client -o yaml | kubectl apply -f -
            kubectl -n ${{ env.NAMESPACE }} patch serviceaccount default \
              -p '{"imagePullSecrets":[{"name":"ghcr-creds"}]}' || true
          else
            echo "GHCR credentials optionnelles non fournies. Utilisation des credentials par défaut."
          fi

      - name: Deploy with Kustomize and force rollout
        run: |
          cd k8s/overlays/prod
          kustomize edit set image goofeat-back=${{ needs.build-and-push.outputs.image_ref }}
          kustomize build . | kubectl apply -n ${{ env.NAMESPACE }} -f -

          # Force rollout en cas d'image identique
          kubectl -n ${{ env.NAMESPACE }} patch deployment goofeat-back \
            -p '{"spec":{"template":{"metadata":{"annotations":{"deployment.kubernetes.io/restart":"'"$(date +%s)"'"}}}}}'

          # Attendre le déploiement
          kubectl -n ${{ env.NAMESPACE }} rollout status deployment/goofeat-back --timeout=300s

      - name: Get deployment status
        run: |
          echo "=== Deployment Status ==="
          kubectl -n ${{ env.NAMESPACE }} get deployments
          echo "=== Pod Status ==="
          kubectl -n ${{ env.NAMESPACE }} get pods
          echo "=== Service Status ==="
          kubectl -n ${{ env.NAMESPACE }} get services
